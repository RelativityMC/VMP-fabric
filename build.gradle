plugins {
	id 'fabric-loom' version '0.11-SNAPSHOT'
	id 'io.github.juuxel.loom-quiltflower' version '1.6.0'
	id 'maven-publish'
	id 'com.github.johnrengelman.shadow' version '7.1.0'
	id 'com.modrinth.minotaur' version '2.+'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = "${project.archives_base_name}-mc${project.minecraft_version}"
version = project.mod_version + "." + getVersionSuffix()
group = project.maven_group

afterEvaluate {
	logger.lifecycle("Version String: ${version}")
	logger.lifecycle(com.ishland.vmp.buildscript.ParseGItHubActionChangelog.getChangelog())
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven { url 'https://jitpack.io' }
}

loom {
	accessWidenerPath = file("src/main/resources/vmp.accesswidener")
}

configurations {
	api.extendsFrom includeApi
	shadowInclude
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	shadowInclude("com.github.RelativityMC.raknetify:fabric:${project.raknetify_version}") {
		transitive = false
	}
	modImplementation ("com.github.RelativityMC.raknetify:fabric:${project.raknetify_version}")

	shadowInclude implementation("com.github.RelativityMC.raknetify:common:${project.raknetify_version}") {
		transitive = false
	}

	shadowInclude implementation("com.ibm.async:asyncutil:${async_util_version}")

	// https://mvnrepository.com/artifact/org.joml/joml-primitives
	compileOnly 'org.joml:joml-primitives:1.10.0'


	// Fabric API. This is technically optional, but you probably want it anyway.
	// modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
}

afterEvaluate {
	migrateMappings.configure {
		outputDir = project.file("src/main/java")
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

shadowJar {
	archiveClassifier = "all-dev"
	configurations = [ project.configurations.shadowInclude ]
	minimize()
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
	exclude "/raknetify*"
	relocate "com.ishland.raknetify", "com.ishland.vmp.deps.raknetify"
}

//noinspection UnnecessaryQualifiedReference
task("remapShadowJar", type: net.fabricmc.loom.task.RemapJarTask, dependsOn: shadowJar) {
	input = shadowJar.archiveFile
	archiveFileName = shadowJar.archiveFileName.get().replaceAll("-dev\\.jar\$", ".jar")
	addNestedDependencies = true
}

assemble.dependsOn(remapShadowJar)

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

modrinth {
	token = System.getenv("MODRINTH_TOKEN") // This is the default. Remember to have the MODRINTH_TOKEN environment variable set or else this will fail, or set it to whatever you want - just make sure it stays private!
	projectId = "vmp-fabric" // This can be the project ID or the slug. Either will work!
	versionNumber = project.version + "+1.18.2" // You don't need to set this manually. Will fail if Modrinth has this version already
	versionName = project.version + " backport for 1.18.2"
	versionType = "beta" // This is the default -- can also be `beta` or `alpha`
	uploadFile = remapShadowJar // With Loom, this MUST be set to `remapJar` instead of `jar`!
	gameVersions = ["1.18.2"] // Must be an array, even with only one version
	loaders = ["fabric"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
	changelog = com.ishland.vmp.buildscript.ParseGItHubActionChangelog.getChangelog()
}

if (System.getenv("CURSEFORGE_TOKEN")) {
	curseforge {
		apiKey = System.getenv("CURSEFORGE_TOKEN")
		project {
			id = '552542'
			changelogType = "markdown"
			changelog = com.ishland.vmp.buildscript.ParseGItHubActionChangelog.getChangelog()
			releaseType = 'beta'

			addGameVersion "1.18.2"
			addGameVersion "Fabric"
			addGameVersion "Java 17"

			mainArtifact(remapShadowJar) {
				displayName = project.version + " backport for 1.18.2"
			}
		}
		options {
			forgeGradleIntegration = false
		}
	}
}

String getVersionSuffix() {
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'describe', '--tags', '--dirty', '--broken'
		standardOutput = stdout
	}
	stdout = stdout.toString().strip()
	def suffix = ""
	if (stdout.endsWith("-dirty")) {
		stdout = stdout.substring(0, stdout.length() - "-dirty".length())
		suffix = "-dirty"
	}
	if (stdout.endsWith("-broken")) {
		stdout = stdout.substring(0, stdout.length() - "-broken".length())
		suffix = "-broken"
	}
	if (stdout.indexOf('-') < 0) {
		return "0" + suffix;
	}
	def split = stdout.split('-')
	return split[split.length - 2] + suffix
}
